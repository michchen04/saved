# IPython log file

import matplotlib
mathplotlib.use('Agg')
matplotlib('Agg')
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
a = np.random.randn(10000)
plt.hist(a)
#[Out]# (array([   11.,    95.,   481.,  1601.,  2750.,  2839.,  1617.,   496.,
#[Out]#          103.,     7.]), array([-3.86214251, -3.09205711, -2.32197172, -1.55188632, -0.78180093,
#[Out]#        -0.01171553,  0.75836987,  1.52845526,  2.29854066,  3.06862605,
#[Out]#         3.83871145]), <a list of 10 Patch objects>)
plt.savefig('1.3.2/Histogram')
%logstart -ort 1.3.2/logs/Last_1.3.2.#.log
%logstop
%logstart -ort 1.3.2/logs/Last_1.3.2.1.log
%logstop
%logstart -ort 1.3.2/logs/Chen_1.3.2.1.log
# Michael Chen 1.3.2 IPython Log
7a. If you multiply by a float, you get a decimal while if you use a integer you get no decimal points
 7a If you multiply by a float, you get a decimal while if you use a integer you get no decimal points
# 7a. If you multiply by a float, you get a decimal while if you use a integer you get no decimal points
7/2
#[Out]# 3
7/2.
#[Out]# 3.5
# 7b. When you dividee by an integer it doesn't do decimal and just cuts it out entirely whereas when you divide by a float, it includes the decimal.
student_age = 16
23**43
#[Out]# 35834136918934220777541995677272642015423987712183913488967L
%logstop
ef add_tip(total, tip_percent): 
    '''Return the total amount including tip'''
    tip = tip_percent*total
    return total + tip
ddef add_tip(total, tip_percent): 
    '''Return the total amount including tip'''
    tip = tip_percent*total
%logstart -ort 1.3.2/logs/Last_1.3.2.#.log
%logstart -ort 1.3.2/logs/Chen_1.3.2.2.log
%logstop
# Fri, 07 Dec 2018 20:59:01
def add_tip(total, tip_percent): 
    '''Return the total amount including tip'''
    tip = tip_percent*total
    return total + tip
%run 1.3.2/Chen_1.3.2.oy
run 1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 20:59:13
%run 1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:00:27
%run 1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:01:02
%run 1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:03:36
#12 If you code a lot before running you spend less time checking for errors in between however if you code a few lines and run it is easy to locate the source of the error.
# Fri, 07 Dec 2018 21:04:54
#12 MITappinventor and Scratch had a C shaped wrapping around the code, simulating an indent.
# Fri, 07 Dec 2018 21:06:08
#13 The docstring could help organization and lets you know what the function does
# Fri, 07 Dec 2018 21:07:16
#14 Deleting local variables that aren't needed clear up memory and space
# Fri, 07 Dec 2018 21:18:31
hyp(3, 4)
# Fri, 07 Dec 2018 21:19:05
# 17a. Hypotenuse test 
# Fri, 07 Dec 2018 21:19:11
hyp(3,4)
# Fri, 07 Dec 2018 21:20:59
hyp(3,4)
# Fri, 07 Dec 2018 21:21:45
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:21:53
hyp(3,4)
# Fri, 07 Dec 2018 21:22:02
hyp(3,4)
# Fri, 07 Dec 2018 21:22:09
hyp(3,4)
# Fri, 07 Dec 2018 21:22:17
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:22:22
hyp(3,4)
# Fri, 07 Dec 2018 21:22:35
hyp(3,4)
# Fri, 07 Dec 2018 21:22:49
hyp(3,4)
# Fri, 07 Dec 2018 21:22:57
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:23:03
hyp(3,4)
# Fri, 07 Dec 2018 21:23:35
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:23:40
hyp(3,4)
# Fri, 07 Dec 2018 21:24:06
hyp(3,4)
# Fri, 07 Dec 2018 21:24:18
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:24:23
hyp(3,4)
# Fri, 07 Dec 2018 21:24:49
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:24:52
hyp(3,4)
#[Out]# 5.0
# Fri, 07 Dec 2018 21:28:09
# 17b. Mean test 
# Fri, 07 Dec 2018 21:28:19
mean(3,4,7)
# Fri, 07 Dec 2018 21:28:28
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:28:33
 mean(3,4,7)
# Fri, 07 Dec 2018 21:28:45
 mean(3,4,7)
# Fri, 07 Dec 2018 21:28:51
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:28:55
mean(3,4,7)
# Fri, 07 Dec 2018 21:29:11
%run  1.3.2/Chen_1.3.2.py
# Fri, 07 Dec 2018 21:29:16
mean(3,4,7)
#[Out]# 4.666666666666667
# Fri, 07 Dec 2018 21:34:19
perimeter(3,4)
# Fri, 07 Dec 2018 21:34:38
perimeter(3,4)
# Fri, 07 Dec 2018 21:34:49
perimeter(3,4)
# Fri, 07 Dec 2018 21:35:05
%logstop
